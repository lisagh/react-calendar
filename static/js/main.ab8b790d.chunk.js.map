{"version":3,"sources":["Calendar.js","serviceWorker.js","index.js"],"names":["Calendar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showModal","setState","show","hideModal","onDateClick","day","e","i","loadData","length","push","launchdate","dateFns","parse","launchDate","isSameDay","title","description","imageFilename","nextMonth","currentMonth","addMonths","state","prevMonth","subMonths","eventclass","Date","selectedDate","eventDate","react_default","a","createElement","className","onClick","format","days","startDate","startOfWeek","key","addDays","_this2","_this$state","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","hasevent","d","eventhappen","_loop","cloneDay","concat","isSameMonth","renderHeader","renderDays","renderCells","Calendar_Modal","handleClose","React","Component","Modal","_ref","showHideClassName","src","process","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_Calendar","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab8b790d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport dateFns from \"date-fns\";\r\nimport \"./calendar.css\";\r\nimport loadData from \"./events.json\";\r\n\r\nclass Calendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.eventclass = \"eventday\";\r\n    this.state = {\r\n      currentMonth: new Date(),\r\n      selectedDate: new Date(),\r\n      eventDate: [],\r\n      show: false,\r\n      title: \"\",\r\n      description: \"\",\r\n      imageFilename: \"\"\r\n    };\r\n  }\r\n  showModal = () => {\r\n    this.setState({ show: true });\r\n  };\r\n\r\n  hideModal = () => {\r\n    this.setState({ show: false });\r\n  };\r\n\r\n  renderHeader() {\r\n    const dateFormat = \"MMMM YYYY\";\r\n\r\n    return (\r\n      <div className=\"header row flex-middle\">\r\n        <div className=\"col col-start\">\r\n          <div className=\" icon fas fa-angle-left\" onClick={this.prevMonth} />\r\n        </div>\r\n        <div className=\"col col-center\">\r\n          <span>{dateFns.format(this.state.currentMonth, dateFormat)}</span>\r\n        </div>\r\n        <div className=\"col col-end\" onClick={this.nextMonth}>\r\n          <div className=\"icon fas fa-angle-right\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderDays() {\r\n    const dateFormat = \"dddd\";\r\n    const days = [];\r\n\r\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      days.push(\r\n        <div className=\"col col-center\" key={i}>\r\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div className=\"days row\">{days}</div>;\r\n  }\r\n\r\n  renderCells() {\r\n    const { currentMonth, selectedDate } = this.state;\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    const startDate = dateFns.startOfWeek(monthStart);\r\n    const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n    const dateFormat = \"D\";\r\n    const rows = [];\r\n\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = \"\";\r\n\r\n    function hasevent(d) {\r\n      var eventhappen;\r\n      for (var i = 0; i < loadData.length; i++) {\r\n        var launchdate = dateFns.parse(loadData[i].launchDate);\r\n        if (dateFns.isSameDay(d, launchdate)) {\r\n          eventhappen = true;\r\n        }\r\n      }\r\n      return eventhappen;\r\n    }\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        const cloneDay = day;\r\n        days.push(\r\n          <div\r\n            className={`col cell ${\r\n              !dateFns.isSameMonth(day, monthStart)\r\n                ? \"disabled\"\r\n                : dateFns.isSameDay(day, selectedDate)\r\n                ? \"today\"\r\n                : hasevent(day)\r\n                ? this.eventclass\r\n                : \"\"\r\n            }`}\r\n            key={day}\r\n            onClick={() => this.onDateClick(dateFns.parse(cloneDay))}\r\n          >\r\n            <span className=\"number\">{formattedDate}</span>\r\n            <span className=\"bg\">{formattedDate}</span>\r\n          </div>\r\n        );\r\n        day = dateFns.addDays(day, 1);\r\n        // console.log(day, hasevent(day));\r\n      }\r\n      rows.push(\r\n        <div className=\"row\" key={day}>\r\n          {days}\r\n        </div>\r\n      );\r\n      days = [];\r\n    }\r\n    return <div className=\"body\">{rows}</div>;\r\n  }\r\n\r\n  onDateClick = day => {\r\n    const e = [];\r\n    for (var i = 0; i < loadData.length; i++) {\r\n      e.push(loadData[i]);\r\n      var launchdate = dateFns.parse(loadData[i].launchDate);\r\n      if (dateFns.isSameDay(day, launchdate)) {\r\n        this.setState({\r\n          show: true,\r\n          title: e[i].title,\r\n          description: e[i].description,\r\n          imageFilename: e[i].imageFilename\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  nextMonth = () => {\r\n    this.setState({\r\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\r\n    });\r\n  };\r\n\r\n  prevMonth = () => {\r\n    this.setState({\r\n      currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calendar\">\r\n        {this.renderHeader()}\r\n        {this.renderDays()}\r\n        {this.renderCells()}\r\n        <Modal\r\n          show={this.state.show}\r\n          handleClose={this.hideModal}\r\n          title={this.state.title}\r\n          description={this.state.description}\r\n          imageFilename={this.state.imageFilename}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst Modal = ({ handleClose, show, title, description, imageFilename }) => {\r\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\r\n  return (\r\n    <div className={showHideClassName}>\r\n      <section className=\"modal-main\">\r\n        <div className=\"image-container\">\r\n          <img\r\n            src={process.env.PUBLIC_URL + `./assets/${imageFilename}`}\r\n            alt={title}\r\n          />\r\n        </div>\r\n        <div className=\"text\">\r\n          <h4>{title}</h4>\r\n          <p>{description}</p>\r\n        </div>\r\n\r\n        <button onClick={handleClose}>Close</button>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Calendar from \"./Calendar\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <div>\n    <h2 className=\"title\">React Event Calendar with Modal</h2>\n    <Calendar />\n  </div>,\n  document.getElementById(\"app\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}